name: CI Test

on:
    push:
        branches:
            - main
    # pull_request:
    #     branches:
    #         - main

jobs:
    test:
        runs-on: ubuntu-latest # Uses GitHub's runner with Docker pre-installed

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Node.js Environment
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "npm"

            - name: Install Dependencies
              run: npm ci

            - name: Run Tests
              run: npm run test
    deploy:
        needs: test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Authenticate to Google Cloud
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

            - name: Set up gcloud CLI
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ secrets.GCP_PROJECT_ID }}

            - name: Configure Docker to use gcloud
              run: gcloud auth configure-docker asia-east1-docker.pkg.dev

            - name: Build Docker Image
              run: |
                  docker build -t asia-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dc-manager-backend/dc-manager-backend-cloud:${{ github.sha }} .

            - name: Push to Artifact Registry
              run: |
                  docker push asia-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dc-manager-backend/dc-manager-backend-cloud:${{ github.sha }}

            - name: Deploy to Cloud Run
              uses: google-github-actions/deploy-cloudrun@v2
              with:
                  service: dc-manager-backend
                  image: asia-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dc-manager-backend/dc-manager-backend-cloud:${{ github.sha }}
                  region: asia-east1
                  flags: --port=4000 --allow-unauthenticated --add-cloudsql-instances=${{ secrets.CLOUD_SQL_INSTANCE }}
                  env_vars: |
                      NODE_ENV=prod
                      DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@/\
                      ${{ secrets.DB_NAME }}?host=/cloudsql/${{ secrets.CLOUD_SQL_INSTANCE }}
                      ACCESS_SECRET=${{ secrets.ACCESS_SECRET }}
                      REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}
